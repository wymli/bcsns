// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: msg_pull.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MsgPullClient is the client API for MsgPull service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgPullClient interface {
	PullLatestMsg(ctx context.Context, in *PullLatestMsgReq, opts ...grpc.CallOption) (*PullLatestMsgResp, error)
	PullLatestMoments(ctx context.Context, in *PullLatestMomentsReq, opts ...grpc.CallOption) (*PullLatestMomentsResp, error)
}

type msgPullClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgPullClient(cc grpc.ClientConnInterface) MsgPullClient {
	return &msgPullClient{cc}
}

func (c *msgPullClient) PullLatestMsg(ctx context.Context, in *PullLatestMsgReq, opts ...grpc.CallOption) (*PullLatestMsgResp, error) {
	out := new(PullLatestMsgResp)
	err := c.cc.Invoke(ctx, "/pb.MsgPull/PullLatestMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgPullClient) PullLatestMoments(ctx context.Context, in *PullLatestMomentsReq, opts ...grpc.CallOption) (*PullLatestMomentsResp, error) {
	out := new(PullLatestMomentsResp)
	err := c.cc.Invoke(ctx, "/pb.MsgPull/PullLatestMoments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgPullServer is the server API for MsgPull service.
// All implementations must embed UnimplementedMsgPullServer
// for forward compatibility
type MsgPullServer interface {
	PullLatestMsg(context.Context, *PullLatestMsgReq) (*PullLatestMsgResp, error)
	PullLatestMoments(context.Context, *PullLatestMomentsReq) (*PullLatestMomentsResp, error)
	mustEmbedUnimplementedMsgPullServer()
}

// UnimplementedMsgPullServer must be embedded to have forward compatible implementations.
type UnimplementedMsgPullServer struct {
}

func (UnimplementedMsgPullServer) PullLatestMsg(context.Context, *PullLatestMsgReq) (*PullLatestMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullLatestMsg not implemented")
}
func (UnimplementedMsgPullServer) PullLatestMoments(context.Context, *PullLatestMomentsReq) (*PullLatestMomentsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullLatestMoments not implemented")
}
func (UnimplementedMsgPullServer) mustEmbedUnimplementedMsgPullServer() {}

// UnsafeMsgPullServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgPullServer will
// result in compilation errors.
type UnsafeMsgPullServer interface {
	mustEmbedUnimplementedMsgPullServer()
}

func RegisterMsgPullServer(s grpc.ServiceRegistrar, srv MsgPullServer) {
	s.RegisterService(&MsgPull_ServiceDesc, srv)
}

func _MsgPull_PullLatestMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullLatestMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgPullServer).PullLatestMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MsgPull/PullLatestMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgPullServer).PullLatestMsg(ctx, req.(*PullLatestMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgPull_PullLatestMoments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullLatestMomentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgPullServer).PullLatestMoments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MsgPull/PullLatestMoments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgPullServer).PullLatestMoments(ctx, req.(*PullLatestMomentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MsgPull_ServiceDesc is the grpc.ServiceDesc for MsgPull service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MsgPull_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MsgPull",
	HandlerType: (*MsgPullServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PullLatestMsg",
			Handler:    _MsgPull_PullLatestMsg_Handler,
		},
		{
			MethodName: "PullLatestMoments",
			Handler:    _MsgPull_PullLatestMoments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msg_pull.proto",
}
