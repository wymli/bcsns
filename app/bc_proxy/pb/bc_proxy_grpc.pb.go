// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: bc_proxy.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BcProxyClient is the client API for BcProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BcProxyClient interface {
	OnChainUserMsg(ctx context.Context, in *OnChainUserMsgReq, opts ...grpc.CallOption) (*OnChainUserMsgResp, error)
	OnChainRoomMsg(ctx context.Context, in *OnChainRoomMsgReq, opts ...grpc.CallOption) (*OnChainRoomMsgResp, error)
	OnChainMoments(ctx context.Context, in *OnChainMomentsReq, opts ...grpc.CallOption) (*OnChainMomentsResp, error)
	PullRoomMsg(ctx context.Context, in *PullRoomMsgReq, opts ...grpc.CallOption) (*PullRoomMsgResp, error)
	PullUserMsg(ctx context.Context, in *PullUserMsgReq, opts ...grpc.CallOption) (*PullUserMsgResp, error)
}

type bcProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewBcProxyClient(cc grpc.ClientConnInterface) BcProxyClient {
	return &bcProxyClient{cc}
}

func (c *bcProxyClient) OnChainUserMsg(ctx context.Context, in *OnChainUserMsgReq, opts ...grpc.CallOption) (*OnChainUserMsgResp, error) {
	out := new(OnChainUserMsgResp)
	err := c.cc.Invoke(ctx, "/pb.bc_proxy/OnChainUserMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcProxyClient) OnChainRoomMsg(ctx context.Context, in *OnChainRoomMsgReq, opts ...grpc.CallOption) (*OnChainRoomMsgResp, error) {
	out := new(OnChainRoomMsgResp)
	err := c.cc.Invoke(ctx, "/pb.bc_proxy/OnChainRoomMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcProxyClient) OnChainMoments(ctx context.Context, in *OnChainMomentsReq, opts ...grpc.CallOption) (*OnChainMomentsResp, error) {
	out := new(OnChainMomentsResp)
	err := c.cc.Invoke(ctx, "/pb.bc_proxy/OnChainMoments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcProxyClient) PullRoomMsg(ctx context.Context, in *PullRoomMsgReq, opts ...grpc.CallOption) (*PullRoomMsgResp, error) {
	out := new(PullRoomMsgResp)
	err := c.cc.Invoke(ctx, "/pb.bc_proxy/PullRoomMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcProxyClient) PullUserMsg(ctx context.Context, in *PullUserMsgReq, opts ...grpc.CallOption) (*PullUserMsgResp, error) {
	out := new(PullUserMsgResp)
	err := c.cc.Invoke(ctx, "/pb.bc_proxy/PullUserMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BcProxyServer is the server API for BcProxy service.
// All implementations must embed UnimplementedBcProxyServer
// for forward compatibility
type BcProxyServer interface {
	OnChainUserMsg(context.Context, *OnChainUserMsgReq) (*OnChainUserMsgResp, error)
	OnChainRoomMsg(context.Context, *OnChainRoomMsgReq) (*OnChainRoomMsgResp, error)
	OnChainMoments(context.Context, *OnChainMomentsReq) (*OnChainMomentsResp, error)
	PullRoomMsg(context.Context, *PullRoomMsgReq) (*PullRoomMsgResp, error)
	PullUserMsg(context.Context, *PullUserMsgReq) (*PullUserMsgResp, error)
	mustEmbedUnimplementedBcProxyServer()
}

// UnimplementedBcProxyServer must be embedded to have forward compatible implementations.
type UnimplementedBcProxyServer struct {
}

func (UnimplementedBcProxyServer) OnChainUserMsg(context.Context, *OnChainUserMsgReq) (*OnChainUserMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnChainUserMsg not implemented")
}
func (UnimplementedBcProxyServer) OnChainRoomMsg(context.Context, *OnChainRoomMsgReq) (*OnChainRoomMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnChainRoomMsg not implemented")
}
func (UnimplementedBcProxyServer) OnChainMoments(context.Context, *OnChainMomentsReq) (*OnChainMomentsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnChainMoments not implemented")
}
func (UnimplementedBcProxyServer) PullRoomMsg(context.Context, *PullRoomMsgReq) (*PullRoomMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullRoomMsg not implemented")
}
func (UnimplementedBcProxyServer) PullUserMsg(context.Context, *PullUserMsgReq) (*PullUserMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullUserMsg not implemented")
}
func (UnimplementedBcProxyServer) mustEmbedUnimplementedBcProxyServer() {}

// UnsafeBcProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BcProxyServer will
// result in compilation errors.
type UnsafeBcProxyServer interface {
	mustEmbedUnimplementedBcProxyServer()
}

func RegisterBcProxyServer(s grpc.ServiceRegistrar, srv BcProxyServer) {
	s.RegisterService(&BcProxy_ServiceDesc, srv)
}

func _BcProxy_OnChainUserMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnChainUserMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcProxyServer).OnChainUserMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bc_proxy/OnChainUserMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcProxyServer).OnChainUserMsg(ctx, req.(*OnChainUserMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcProxy_OnChainRoomMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnChainRoomMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcProxyServer).OnChainRoomMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bc_proxy/OnChainRoomMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcProxyServer).OnChainRoomMsg(ctx, req.(*OnChainRoomMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcProxy_OnChainMoments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnChainMomentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcProxyServer).OnChainMoments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bc_proxy/OnChainMoments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcProxyServer).OnChainMoments(ctx, req.(*OnChainMomentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcProxy_PullRoomMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullRoomMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcProxyServer).PullRoomMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bc_proxy/PullRoomMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcProxyServer).PullRoomMsg(ctx, req.(*PullRoomMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcProxy_PullUserMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullUserMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcProxyServer).PullUserMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bc_proxy/PullUserMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcProxyServer).PullUserMsg(ctx, req.(*PullUserMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BcProxy_ServiceDesc is the grpc.ServiceDesc for BcProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BcProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.bc_proxy",
	HandlerType: (*BcProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnChainUserMsg",
			Handler:    _BcProxy_OnChainUserMsg_Handler,
		},
		{
			MethodName: "OnChainRoomMsg",
			Handler:    _BcProxy_OnChainRoomMsg_Handler,
		},
		{
			MethodName: "OnChainMoments",
			Handler:    _BcProxy_OnChainMoments_Handler,
		},
		{
			MethodName: "PullRoomMsg",
			Handler:    _BcProxy_PullRoomMsg_Handler,
		},
		{
			MethodName: "PullUserMsg",
			Handler:    _BcProxy_PullUserMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bc_proxy.proto",
}
