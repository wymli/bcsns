syntax = "proto3";

option go_package = "./pb";

package pb;

message OnlineUserReq {
  uint64 user_id = 1;
  string gateway_addr = 2;
}
message OnlineUserResp { int64 exp = 3; }

message BatchOnlineUserReq {
  repeated uint64 user_id = 1;
  string gateway_addr = 2;
}
message BatchOnlineUserResp { int64 exp = 3; }

message KeepAliveUserReq { uint64 user_id = 1; }
message KeepAliveUserResp { int64 exp = 3; }

message BatchKeepAliveUserReq { repeated uint64 user_id = 1; }
message BatchKeepAliveUserResp { int64 exp = 3; }

message OfflineUserReq { uint64 user_id = 1; }
message OfflineUserResp {}

message BatchOfflineUserReq { repeated uint64 user_id = 1; }
message BatchOfflineUserResp {}

message GetUserGatewayReq { uint64 user_id = 1; }
message GetUserGatewayResp { string gateway_addr = 1; }

message BatchGetUserGatewayReq { repeated uint64 user_id = 1; }
message BatchGetUserGatewayResp { repeated string gateway_addr = 1; }

message GetAllOnlineUserReq {}
message GetAllOnlineUserResp { repeated uint64 user_id = 1; }

service online {
  rpc OnlineUser(OnlineUserReq)
      returns (OnlineUserResp); // online user if user is not online
  rpc BatchOnlineUser(BatchOnlineUserReq) returns (BatchOnlineUserResp);

  rpc OfflineUser(OfflineUserReq)
      returns (OfflineUserResp); // offline user if user is online
  rpc BatchOfflineUser(BatchOfflineUserReq) returns (BatchOfflineUserResp);

  rpc KeepAliveUser(KeepAliveUserReq)
      returns (KeepAliveUserResp); // new lease if user is online, panic if user
                                   // is not online
  rpc BatchKeepAliveUser(BatchKeepAliveUserReq)
      returns (BatchKeepAliveUserResp);

  rpc GetUserGateway(GetUserGatewayReq) returns (GetUserGatewayResp);
  rpc BatchGetUserGateway(BatchGetUserGatewayReq)
      returns (BatchGetUserGatewayResp);

  rpc GetAllOnlineUser(GetAllOnlineUserReq) returns (GetAllOnlineUserResp);
}